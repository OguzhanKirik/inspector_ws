from sklearn.cluster import DBSCAN
import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial.distance import pdist, squareform 
 
##########################Read file, Cluster, Find extremes of clusters######################################################
Targ_fori=np.array(np.loadtxt('/home/gabriele/catkin_ws/src/abb_libegm_samples/Data/punti_e_eulero2.txt', usecols=range(6)))
# print (matrix) 
#Dbscancluster
dbs=DBSCAN(eps=30, min_samples=3).fit(Targ_fori[:,0:2])
labels=dbs.labels_
 
NTraj= len(set(labels)) - (1 if -1 in labels else 0) #number of trajectories
Extremes=np.zeros((NTraj*2,3)) #inizialize extremes vector
Ordered_tag_fori=np.ones((len(Targ_fori),7))*(-1) # label/x/y/z/ex/ey/ez     (forse aggiungere alzata robot tra traiettorie ultimo punto +off_z)
print(labels)
#Build matrix with extremes and matrix with ordered clustered traj
count=-1
keep_track=0
for i in range(NTraj):
    finder=np.argwhere(dbs.labels_== i)
 
    finder_length=len(finder)
    supp=np.zeros((finder_length,3))
   
    for j in range(len(finder)):
       supp[j,0:2]=Targ_fori[finder[j],0:2]
       
       Ordered_tag_fori[keep_track+j,0]= i
       Ordered_tag_fori[keep_track+j,1:7]= Targ_fori[finder[j],:]
    
    keep_track=keep_track+len(finder)
    
    
    
    Dist=pdist(supp)
    Z=squareform(Dist)
    
    max_el=np.max(np.max(Z))
    ii=np.argwhere(Z==max_el)
    count =count +1
    Extremes[count,0]=Targ_fori[finder[ii[0,0]],0] #First extreme
    Extremes[count,1]=Targ_fori[finder[ii[0,0]],1]
    Extremes[count,2]=Targ_fori[finder[ii[0,0]],2]
    count=count+1
    Extremes[count,0]=Targ_fori[finder[ii[1,0]],0] #Second extreme
    Extremes[count,1]=Targ_fori[finder[ii[1,0]],1]
    Extremes[count,2]=Targ_fori[finder[ii[1,0]],2]
#print (Extremes)
print(len(Targ_fori))
print(Targ_fori)
print(len(Ordered_tag_fori))
print(Ordered_tag_fori[:,0])
#print(labels)
#Now i got the extremes-> Distance matrix redesign
Ex_dist=pdist(Extremes)
Ex_Dist_mat=squareform(Ex_dist)
 
for k in range(0,len(Extremes),2):
    Ex_Dist_mat[k,k+1]=0.0
    Ex_Dist_mat[k+1,k]=0.0
 
 
##################################Procedure to order the trajectories NN approach (starting from cluster 1)##################
Proc_Mat=Ex_Dist_mat
for u in range(len(Extremes)):
    Proc_Mat[u,u]=np.inf #Avoid that the NN is the point itself
Path=np.zeros((len(Extremes),1))
start=np.zeros((len(Extremes)+1,1))#row to start (also starting point)
step=0
for t in range(len(Extremes)):
 
 NN=np.min(Proc_Mat[int(start[t,0]),:])
 Extr_NN=np.argwhere(Proc_Mat[int(start[t,0]), :]==NN)
 Proc_Mat[:,int(Extr_NN[0])]=np.inf
 Path[step,0]=Extr_NN[0]+1 
 start[step+1,0]=Extr_NN[0]
 step=step+1
 
 
print (Path)
#i get the order list of extremes -> In trajectories path_planning with NN
#TO DO: pass the first extreme-> Pass the entire trajectory->Next extreme and so on...
 
##########################################Loop to order the points according to the result of the PathPlan#########################
Path_fori=np.zeros((len(Targ_fori),7)) #Matrix with the final points to pass to the robot
is_label=0
delta_x=0 #delta for orientation of trajectories
delta_y=0
delta_z=0
tracker=0
for h in range(1,len(Path),2):
    
   is_label=int(abs(round(Path[h,0])/2-0.3)) #Retrieve trajecotry associated to the extreme
   elements=np.argwhere(Ordered_tag_fori[:,0]==is_label)
   delta_x= Extremes[is_label,0]-Extremes[is_label+1,0]
   delta_y=Extremes[is_label,1]-Extremes[is_label+1,1]
   delta_z=Extremes[is_label,2]-Extremes[is_label+1,2]
   if (abs(delta_x) > abs(delta_y) and abs(delta_x) > abs(delta_z)): #If x principal components between extreme-> sort on x column
       if (Extremes[is_label,0]<Extremes[is_label+1,0]):
           Path_fori[tracker:tracker+len(elements)-1,:]=Ordered_tag_fori[np.argsort(Ordered_tag_fori[int(elements[0]):int(elements[len(elements)-1]),1])]
       else:
           Path_fori[tracker:tracker+len(elements)-1,:]=Ordered_tag_fori[np.argsort(Ordered_tag_fori[int(elements[0]):int(elements[len(elements)-1]),1])[::-1]]
   elif(abs(delta_y) > abs(delta_x) and abs(delta_y) > abs(delta_z)):
       if (Extremes[is_label,1]<Extremes[is_label+1,1]):
           Path_fori[tracker:tracker+len(elements)-1,:]=Ordered_tag_fori[np.argsort(Ordered_tag_fori[int(elements[0]):int(elements[len(elements)-1]),2])]
       else:
           Path_fori[tracker:tracker+len(elements)-1,:]=Ordered_tag_fori[np.argsort(Ordered_tag_fori[int(elements[0]):int(elements[len(elements)-1]),2])[::-1]]
   else:
       if (Extremes[is_label,2]<Extremes[is_label+1,2]):
           Path_fori[tracker:tracker+len(elements)-1,:]=Ordered_tag_fori[np.argsort(Ordered_tag_fori[int(elements[0]):int(elements[len(elements)-1]),3])]
       else:
           Path_fori[tracker:tracker+len(elements)-1,:]=Ordered_tag_fori[np.argsort(Ordered_tag_fori[int(elements[0]):int(elements[len(elements)-1]),3])[::-1]]
 
    
    
   tracker=tracker+len(elements)
 
#Path_fori->Final structure with coordinates to be passed to the robot
#print(Path_fori)
